// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class regLevelEvent extends ethereum.Event {
  get params(): regLevelEvent__Params {
    return new regLevelEvent__Params(this);
  }
}

export class regLevelEvent__Params {
  _event: regLevelEvent;

  constructor(event: regLevelEvent) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _referralID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _referrer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class reentryLevelEvent extends ethereum.Event {
  get params(): reentryLevelEvent__Params {
    return new reentryLevelEvent__Params(this);
  }
}

export class reentryLevelEvent__Params {
  _event: reentryLevelEvent;

  constructor(event: reentryLevelEvent) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _referralID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class buyLevelEvent extends ethereum.Event {
  get params(): buyLevelEvent__Params {
    return new buyLevelEvent__Params(this);
  }
}

export class buyLevelEvent__Params {
  _event: buyLevelEvent;

  constructor(event: buyLevelEvent) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _level(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class getMoneyForLevelEvent extends ethereum.Event {
  get params(): getMoneyForLevelEvent__Params {
    return new getMoneyForLevelEvent__Params(this);
  }
}

export class getMoneyForLevelEvent__Params {
  _event: getMoneyForLevelEvent;

  constructor(event: getMoneyForLevelEvent) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _referral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get matrixLevel(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _level(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class paidForLevelEv extends ethereum.Event {
  get params(): paidForLevelEv__Params {
    return new paidForLevelEv__Params(this);
  }
}

export class paidForLevelEv__Params {
  _event: paidForLevelEv;

  constructor(event: paidForLevelEv) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _referral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _level(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _time(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class binaryData extends ethereum.Event {
  get params(): binaryData__Params {
    return new binaryData__Params(this);
  }
}

export class binaryData__Params {
  _event: binaryData;

  constructor(event: binaryData) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _userId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _referralID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _level(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referralAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Jackpot extends ethereum.Event {
  get params(): Jackpot__Params {
    return new Jackpot__Params(this);
  }
}

export class Jackpot__Params {
  _event: Jackpot;

  constructor(event: Jackpot) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class netProfit extends ethereum.Event {
  get params(): netProfit__Params {
    return new netProfit__Params(this);
  }
}

export class netProfit__Params {
  _event: netProfit;

  constructor(event: netProfit) {
    this._event = event;
  }

  get _amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class jackpotfundEntry extends ethereum.Event {
  get params(): jackpotfundEntry__Params {
    return new jackpotfundEntry__Params(this);
  }
}

export class jackpotfundEntry__Params {
  _event: jackpotfundEntry;

  constructor(event: jackpotfundEntry) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class mbd100__userInfosResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getReferrerID(): BigInt {
    return this.value1;
  }

  getChildCount(): BigInt {
    return this.value2;
  }

  getNoofpayments(): BigInt {
    return this.value3;
  }
}

export class mbd100__usersResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getIsExist(): boolean {
    return this.value0;
  }

  getId(): BigInt {
    return this.value1;
  }

  getBinaryIncome(): BigInt {
    return this.value2;
  }

  getRefferelIncome(): BigInt {
    return this.value3;
  }

  getActiveLevel(): BigInt {
    return this.value4;
  }

  getActiveLevelPlanB(): BigInt {
    return this.value5;
  }

  getUpline(): Address {
    return this.value6;
  }

  getBinaryIncomeLevelWise(): BigInt {
    return this.value7;
  }

  getReferrerID(): BigInt {
    return this.value8;
  }
}

export class mbd100 extends ethereum.SmartContract {
  static bind(address: Address): mbd100 {
    return new mbd100("mbd100", address);
  }

  viewUserReferralId(_user: Address): BigInt {
    let result = super.call(
      "viewUserReferralId",
      "viewUserReferralId(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_viewUserReferralId(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewUserReferralId",
      "viewUserReferralId(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  findFreeReferrer(_user: Address): Address {
    let result = super.call(
      "findFreeReferrer",
      "findFreeReferrer(address):(address)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toAddress();
  }

  try_findFreeReferrer(_user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "findFreeReferrer",
      "findFreeReferrer(address):(address)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  viewUserLevelWiseBinaryIncome(_user: Address): BigInt {
    let result = super.call(
      "viewUserLevelWiseBinaryIncome",
      "viewUserLevelWiseBinaryIncome(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_viewUserLevelWiseBinaryIncome(
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewUserLevelWiseBinaryIncome",
      "viewUserLevelWiseBinaryIncome(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  jackpotpaidid(): BigInt {
    let result = super.call("jackpotpaidid", "jackpotpaidid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_jackpotpaidid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "jackpotpaidid",
      "jackpotpaidid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNoofPayments(_user: Address): BigInt {
    let result = super.call(
      "getNoofPayments",
      "getNoofPayments(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getNoofPayments(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNoofPayments",
      "getNoofPayments(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  walletAmountPlanB(param0: Address): BigInt {
    let result = super.call(
      "walletAmountPlanB",
      "walletAmountPlanB(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_walletAmountPlanB(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "walletAmountPlanB",
      "walletAmountPlanB(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfos(param0: Address): mbd100__userInfosResult {
    let result = super.call(
      "userInfos",
      "userInfos(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new mbd100__userInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_userInfos(param0: Address): ethereum.CallResult<mbd100__userInfosResult> {
    let result = super.tryCall(
      "userInfos",
      "userInfos(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new mbd100__userInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  viewUserReferral(_user: Address): Array<Address> {
    let result = super.call(
      "viewUserReferral",
      "viewUserReferral(address):(address[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toAddressArray();
  }

  try_viewUserReferral(_user: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "viewUserReferral",
      "viewUserReferral(address):(address[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  userAddressByID(param0: BigInt): Address {
    let result = super.call(
      "userAddressByID",
      "userAddressByID(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_userAddressByID(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userAddressByID",
      "userAddressByID(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PlanBJackpot(param0: BigInt): Address {
    let result = super.call("PlanBJackpot", "PlanBJackpot(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_PlanBJackpot(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "PlanBJackpot",
      "PlanBJackpot(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastIDCount(): BigInt {
    let result = super.call("lastIDCount", "lastIDCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastIDCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastIDCount", "lastIDCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LEVEL_PRICE(param0: BigInt): BigInt {
    let result = super.call("LEVEL_PRICE", "LEVEL_PRICE(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_LEVEL_PRICE(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LEVEL_PRICE",
      "LEVEL_PRICE(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFreeParent(): BigInt {
    let result = super.call("lastFreeParent", "lastFreeParent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastFreeParent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFreeParent",
      "lastFreeParent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerWallet(): Address {
    let result = super.call("ownerWallet", "ownerWallet():(address)", []);

    return result[0].toAddress();
  }

  try_ownerWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerWallet", "ownerWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userList(param0: BigInt): Address {
    let result = super.call("userList", "userList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_userList(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("userList", "userList(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currUserID(): BigInt {
    let result = super.call("currUserID", "currUserID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currUserID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currUserID", "currUserID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewUserEarnedEather(_user: Address): BigInt {
    let result = super.call(
      "viewUserEarnedEather",
      "viewUserEarnedEather(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_viewUserEarnedEather(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewUserEarnedEather",
      "viewUserEarnedEather(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  users(param0: Address): mbd100__usersResult {
    let result = super.call(
      "users",
      "users(address):(bool,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new mbd100__usersResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_users(param0: Address): ethereum.CallResult<mbd100__usersResult> {
    let result = super.tryCall(
      "users",
      "users(address):(bool,uint256,uint256,uint256,uint256,uint256,address,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new mbd100__usersResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  viewUserActiveLevel(_user: Address): BigInt {
    let result = super.call(
      "viewUserActiveLevel",
      "viewUserActiveLevel(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_viewUserActiveLevel(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewUserActiveLevel",
      "viewUserActiveLevel(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  jackpotAmount(): BigInt {
    let result = super.call("jackpotAmount", "jackpotAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_jackpotAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "jackpotAmount",
      "jackpotAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfcontract(): BigInt {
    let result = super.call(
      "balanceOfcontract",
      "balanceOfcontract():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_balanceOfcontract(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfcontract",
      "balanceOfcontract():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  viewUserLevelWisePartners(_user: Address, _matrixLevel: BigInt): BigInt {
    let result = super.call(
      "viewUserLevelWisePartners",
      "viewUserLevelWisePartners(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_matrixLevel)
      ]
    );

    return result[0].toBigInt();
  }

  try_viewUserLevelWisePartners(
    _user: Address,
    _matrixLevel: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "viewUserLevelWisePartners",
      "viewUserLevelWisePartners(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_matrixLevel)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  jackpotid(): BigInt {
    let result = super.call("jackpotid", "jackpotid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_jackpotid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("jackpotid", "jackpotid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Login(_user: Address): BigInt {
    let result = super.call("Login", "Login(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_Login(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Login", "Login(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  walletAmount(param0: Address): BigInt {
    let result = super.call("walletAmount", "walletAmount(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_walletAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "walletAmount",
      "walletAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ActivatePlanBCall extends ethereum.Call {
  get inputs(): ActivatePlanBCall__Inputs {
    return new ActivatePlanBCall__Inputs(this);
  }

  get outputs(): ActivatePlanBCall__Outputs {
    return new ActivatePlanBCall__Outputs(this);
  }
}

export class ActivatePlanBCall__Inputs {
  _call: ActivatePlanBCall;

  constructor(call: ActivatePlanBCall) {
    this._call = call;
  }
}

export class ActivatePlanBCall__Outputs {
  _call: ActivatePlanBCall;

  constructor(call: ActivatePlanBCall) {
    this._call = call;
  }
}

export class RegUserCall extends ethereum.Call {
  get inputs(): RegUserCall__Inputs {
    return new RegUserCall__Inputs(this);
  }

  get outputs(): RegUserCall__Outputs {
    return new RegUserCall__Outputs(this);
  }
}

export class RegUserCall__Inputs {
  _call: RegUserCall;

  constructor(call: RegUserCall) {
    this._call = call;
  }

  get _referrerID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RegUserCall__Outputs {
  _call: RegUserCall;

  constructor(call: RegUserCall) {
    this._call = call;
  }
}

export class _regUserCall extends ethereum.Call {
  get inputs(): _regUserCall__Inputs {
    return new _regUserCall__Inputs(this);
  }

  get outputs(): _regUserCall__Outputs {
    return new _regUserCall__Outputs(this);
  }
}

export class _regUserCall__Inputs {
  _call: _regUserCall;

  constructor(call: _regUserCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _level(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class _regUserCall__Outputs {
  _call: _regUserCall;

  constructor(call: _regUserCall) {
    this._call = call;
  }
}

export class RegUserPlanBCall extends ethereum.Call {
  get inputs(): RegUserPlanBCall__Inputs {
    return new RegUserPlanBCall__Inputs(this);
  }

  get outputs(): RegUserPlanBCall__Outputs {
    return new RegUserPlanBCall__Outputs(this);
  }
}

export class RegUserPlanBCall__Inputs {
  _call: RegUserPlanBCall;

  constructor(call: RegUserPlanBCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _level(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RegUserPlanBCall__Outputs {
  _call: RegUserPlanBCall;

  constructor(call: RegUserPlanBCall) {
    this._call = call;
  }
}

export class BuyLevelCall extends ethereum.Call {
  get inputs(): BuyLevelCall__Inputs {
    return new BuyLevelCall__Inputs(this);
  }

  get outputs(): BuyLevelCall__Outputs {
    return new BuyLevelCall__Outputs(this);
  }
}

export class BuyLevelCall__Inputs {
  _call: BuyLevelCall;

  constructor(call: BuyLevelCall) {
    this._call = call;
  }

  get _level(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyLevelCall__Outputs {
  _call: BuyLevelCall;

  constructor(call: BuyLevelCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ownerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
