// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class regLevelEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save regLevelEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type regLevelEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("regLevelEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): regLevelEvent | null {
    return changetype<regLevelEvent | null>(
      store.get("regLevelEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _userId(): BigInt {
    let value = this.get("_userId");
    return value!.toBigInt();
  }

  set _userId(value: BigInt) {
    this.set("_userId", Value.fromBigInt(value));
  }

  get _referralID(): BigInt {
    let value = this.get("_referralID");
    return value!.toBigInt();
  }

  set _referralID(value: BigInt) {
    this.set("_referralID", Value.fromBigInt(value));
  }

  get _referrer(): Bytes {
    let value = this.get("_referrer");
    return value!.toBytes();
  }

  set _referrer(value: Bytes) {
    this.set("_referrer", Value.fromBytes(value));
  }

  get _time(): BigInt {
    let value = this.get("_time");
    return value!.toBigInt();
  }

  set _time(value: BigInt) {
    this.set("_time", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class reentryLevelEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save reentryLevelEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type reentryLevelEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("reentryLevelEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): reentryLevelEvent | null {
    return changetype<reentryLevelEvent | null>(
      store.get("reentryLevelEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _userId(): BigInt {
    let value = this.get("_userId");
    return value!.toBigInt();
  }

  set _userId(value: BigInt) {
    this.set("_userId", Value.fromBigInt(value));
  }

  get _referralID(): BigInt {
    let value = this.get("_referralID");
    return value!.toBigInt();
  }

  set _referralID(value: BigInt) {
    this.set("_referralID", Value.fromBigInt(value));
  }

  get _time(): BigInt {
    let value = this.get("_time");
    return value!.toBigInt();
  }

  set _time(value: BigInt) {
    this.set("_time", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class buyLevelEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save buyLevelEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type buyLevelEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("buyLevelEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): buyLevelEvent | null {
    return changetype<buyLevelEvent | null>(
      store.get("buyLevelEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _level(): BigInt {
    let value = this.get("_level");
    return value!.toBigInt();
  }

  set _level(value: BigInt) {
    this.set("_level", Value.fromBigInt(value));
  }

  get _time(): BigInt {
    let value = this.get("_time");
    return value!.toBigInt();
  }

  set _time(value: BigInt) {
    this.set("_time", Value.fromBigInt(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class getMoneyForLevelEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save getMoneyForLevelEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type getMoneyForLevelEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("getMoneyForLevelEvent", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): getMoneyForLevelEvent | null {
    return changetype<getMoneyForLevelEvent | null>(
      store.get("getMoneyForLevelEvent", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _referral(): Bytes {
    let value = this.get("_referral");
    return value!.toBytes();
  }

  set _referral(value: Bytes) {
    this.set("_referral", Value.fromBytes(value));
  }

  get matrixLevel(): BigInt {
    let value = this.get("matrixLevel");
    return value!.toBigInt();
  }

  set matrixLevel(value: BigInt) {
    this.set("matrixLevel", Value.fromBigInt(value));
  }

  get _level(): BigInt {
    let value = this.get("_level");
    return value!.toBigInt();
  }

  set _level(value: BigInt) {
    this.set("_level", Value.fromBigInt(value));
  }

  get _time(): BigInt {
    let value = this.get("_time");
    return value!.toBigInt();
  }

  set _time(value: BigInt) {
    this.set("_time", Value.fromBigInt(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class paidForLevelEv extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save paidForLevelEv entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type paidForLevelEv must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("paidForLevelEv", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): paidForLevelEv | null {
    return changetype<paidForLevelEv | null>(
      store.get("paidForLevelEv", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _referral(): Bytes {
    let value = this.get("_referral");
    return value!.toBytes();
  }

  set _referral(value: Bytes) {
    this.set("_referral", Value.fromBytes(value));
  }

  get _level(): BigInt {
    let value = this.get("_level");
    return value!.toBigInt();
  }

  set _level(value: BigInt) {
    this.set("_level", Value.fromBigInt(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _time(): BigInt {
    let value = this.get("_time");
    return value!.toBigInt();
  }

  set _time(value: BigInt) {
    this.set("_time", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class binaryData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save binaryData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type binaryData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("binaryData", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): binaryData | null {
    return changetype<binaryData | null>(
      store.get("binaryData", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _userId(): BigInt {
    let value = this.get("_userId");
    return value!.toBigInt();
  }

  set _userId(value: BigInt) {
    this.set("_userId", Value.fromBigInt(value));
  }

  get _referralID(): BigInt {
    let value = this.get("_referralID");
    return value!.toBigInt();
  }

  set _referralID(value: BigInt) {
    this.set("_referralID", Value.fromBigInt(value));
  }

  get _level(): BigInt {
    let value = this.get("_level");
    return value!.toBigInt();
  }

  set _level(value: BigInt) {
    this.set("_level", Value.fromBigInt(value));
  }

  get referralAddress(): Bytes {
    let value = this.get("referralAddress");
    return value!.toBytes();
  }

  set referralAddress(value: Bytes) {
    this.set("referralAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Jackpot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Jackpot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Jackpot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Jackpot", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Jackpot | null {
    return changetype<Jackpot | null>(store.get("Jackpot", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class netProfit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save netProfit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type netProfit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("netProfit", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): netProfit | null {
    return changetype<netProfit | null>(
      store.get("netProfit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class jackpotfundEntry extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save jackpotfundEntry entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type jackpotfundEntry must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("jackpotfundEntry", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): jackpotfundEntry | null {
    return changetype<jackpotfundEntry | null>(
      store.get("jackpotfundEntry", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _user(): Bytes {
    let value = this.get("_user");
    return value!.toBytes();
  }

  set _user(value: Bytes) {
    this.set("_user", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
